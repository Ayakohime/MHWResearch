//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr, Fandirus, Material, DeathCream
//   Version: 
//   Purpose: Help with modding Monster SOBJs, this is a seperate stand alone file for all Monster related SOBJs. There is a general file that contains all SOBJs.
//  Category: 
// File Mask: *.sobj (Boss and Zako Monsters only)
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// Header Information
typedef struct {
    long    signature;
    long    fType<name="File Type">;
    if (fType == 6451059) {
        long    Version;
        long    sType;
        long    SOHCnt;
        if (SOHCnt > 0){char    SOH[SOHCnt];}    //Only for Otomos
    }
    uint32  ObjCnt<bgcolor=0x0000ff,name="Object Count">;
} Header;

//------------------------------------------------
// SOBJL File
typedef struct {
    long    SOH<bgcolor=0xff0000,name="Start of Header">;
    long    ind<bgcolor=0x0000ff,name="Index">;
    long    cmd<bgcolor=0x800800,name="Command">;
    if (cmd == 0){}
    else{string  pat<bgcolor=0x800080,name="Path">;}
    uint32  NUL<name="Null">;
} rSetObject;

//------------------------------------------------
// Spawn
typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   Rot_X<bgcolor=0x00ff00,name="Rotation   X">;
    float   Rot_Y<bgcolor=0x00ff00,name="Rotation   Y">;
    float   Rot_Z<bgcolor=0x00ff00,name="Rotation   Z">;
    float   Spn_X<bgcolor=0x00ff00,name="Spawn      X">;
    float   Spn_Y<bgcolor=0x00ff00,name="Spawn      Y">;
    float   Spn_Z<bgcolor=0x00ff00,name="Spawn      Z">;
    local string s;
    SPrintf(s, "[pX: %f \t pY: %f \t pZ: %f] \t [rX: %f \t rY: %f \t rZ: %f]", 
                Pos_X, Pos_Y, Pos_Z, Rot_X, Rot_Y, Rot_Z);
} Spawn;

//------------------------------------------------
// OddStruct
typedef struct {
    byte    SOH1;
    byte    unkn0;
    byte    unkn1;
    byte    unkn2;
    byte    unkn3;
    if(cType == "cAssetBasicSetObject") {byte    unkn4[28];}
    else {byte  unkn6[13];}
    long    EOT1;
} oStruct;

//------------------------------------------------
// Parameter Data Types
typedef struct {
    byte    bool<bgcolor=0xff0000>;
} dBool;        //dType = 3

typedef struct {
    int32   value<bgcolor=0xff0000,name="Value">;
} dInt32;       //dType - 4

typedef struct {
    float   draw<bgcolor=0x00ff00,name="Draw Distance">;
} dFloat;       //dType = 6

typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position   X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position   Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position   Z">;
    uint32  NUL<hidden=true>;
} dVector4;     //dType = 8

typedef struct {
    dVector4    dvector4[4]<read=ReadVector4,name="Matrix 4x4",optimize=false>;
} dMatrix4X4;    //dType = 9

typedef struct {
    byte    NUL0<hidden=true>;
    uint32  value<bgcolor=0xff0000,name="Value">;
    byte    NUL1<hidden=true>;
} dClass;       //dType =13

//------------------------------------------------
// Parameters
typedef struct {
    uint32  dType<name="Data Type">;
    switch(dType) {
        case 3  : dBool         dbool<read=ReadBool,name="Bool">;           break;
        case 4  : dInt32        dint32<read=ReadInt32,name="Int32">;        break;
        case 6  : dFloat        dfloatM<read=ReadFloat32,name="Float">;     break;
        case 8  : dVector4      dvector4<read=ReadVector,name="Vector4">;   break;
        case 9  : dMatrix4X4    dmatrix4x4<name="Matrix 4x4">;               break;
        case 13 : dClass        dclass<read=ReadClass,name="Class">;        break;
    }
    string  PRM<bgcolor=0x800080,name="Parameter">;
    uint32  DTypev<bgcolor=0xff0000,name="Data Type ID">;
    string  DTypes<bgcolor=0x800080,name="Data Type String">;
    uint32  class<bgcolor=0xff0000,name="Value/Class">;
    byte    SOH[9]<hidden=true>;
} Parameters;

//------------------------------------------------
// Gimmick
typedef struct {
    string  cmd;
    uint32  unkn1;
    uint32  unkn2;
    float   unkn3;
    float   unkn4;
    float   unkn5;
    float   unkn6;
    float   unkn7;
    float   unkn8;
} GM;


//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    IBsignature;
    long    unkn0;
    long    unkn1;
    long    unkn2;
    long    unkn3;
    long    unkn4;
} Uunkn; //AIFSM

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    IBsignature;
    long    unkn0;
    long    unkn1;
    long    unkn2;
} Uunkn2; //AIFSM

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    ID;
    float   unkn1;
    float   unkn2;
} Six;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    IBsignature;
    uint32  unkn0<bgcolor=0xff0000>;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   Rot_X<bgcolor=0x00ff00,name="Rotation   X">;
    float   Rot_Y<bgcolor=0x00ff00,name="Rotation   Y">;
    float   Rot_Z<bgcolor=0x00ff00,name="Rotation   Z">;
    float   Spn_X<bgcolor=0x00ff00,name="Spawn">;
    char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
    if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
    char    NUL0[2];
    char    Thk[]<bgcolor=0x80080>;
    if (Thk != "") {char    tPath[]<bgcolor=0x800080,name="Path">;}
    uint32  variant<bgcolor=0xff0000,name="Status / Variant">;
    char    zako[]<bgcolor=0x800080>;
    char    NUL1[12];
} AIFSM;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    char    SOH;
    //This IF might need to be removed or seperated only for EMS files
    if (SOH != 1) {
        char    Thk[]<bgcolor=0x800080,name="Think Table">;
        if (Thk != ""){char    path[]<bgcolor=0x800080,name="Path">;}
        char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
        byte    NUL[5];
    }
    //cEmSetter only I believe
    else {
        long    unkn1;
        uint32  unkn2;
        uint32  unkn3;
        byte    NUL0;
        char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
        byte    NUL[5];
    }
} ThinkTable;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
        char    Thk[]<bgcolor=0x800080,name="Think Table">;
        if (Thk != ""){char    path[]<bgcolor=0x800080,name="Path">;}
        char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
        byte    NUL;    //DeathCream noticed it was a byte + long
        long    unkn;
} THKAIFSM;

//------------------------------------------------
// [cEmSetter] Zako Spawn
typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn16;
    float   unkn17;
    long    FFFF2;
    long    FFFF3;
} ZakoSpawn;

//------------------------------------------------
// [cEmSetter] Boss Spawn
typedef struct {
    long    IBsignature;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn<bgcolor=0x00ff00>;
    long    cmd<bgcolor=0x800080,name="rSetObject">;
    if (cmd != 0){char path[]<bgcolor=0x800080,name="Path">;}
} BossSpawn;

//------------------------------------------------
// [cEmSetter] Boss Trace
typedef struct {
    long    IBsignature;
    long    FFFF1;
    long    FFFF2<bgcolor=0xff0000>;
    string  cmd<bgcolor=0x800080,name="rSetObject">;
    if (cmd != ""){char path[]<bgcolor=0x800080,name="Path">;}
} TraceSet;

//------------------------------------------------
// [EM] Boss Data
typedef struct {
    float   Size<name="Monster Size">;
    float   unkn3;
    long    unkn4;
    long    mID<bgcolor=0x800080,name="Monster ID">;
    float   unkn6;
    uint32  fCnt<name="[AIFSM] Count">;
    if (fCnt > 0) {Uunkn uunkn[fCnt]<read=ReadUunkn,name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter
    //uint32  six1; //Pre IB
    uint32  six2;
    Six six[six2]<read=ReadSix,name="Unknown SIX">; //cEmGroupSetter
    byte    IBgarbage[9];
    long    uCnt<name="AIFSM Bool??">;
    if (uCnt == 1) {ThinkTable  thinktable<name="Think Table">;} //cEmGroupSetter
    else{THKAIFSM   thkaifsm<name="Think Table/AI FSM">;}
    long    FFFF1;
    long    unkn15; //if FFFF=FFFF 2 in arenas, 0 Rath
    char    NUL3;
    long    sCnt<bgcolor=0x0000ff,name="[Zako] Count">;
    if (sCnt > 0) {ZakoSpawn zakospawn[sCnt]<read=ReadZako,name="[Zako] Spawn",optimize=false>;} //cEmGroupSetter
    uint32  lCnt<bgcolor=0x0000ff,name="[Boss] Count">;
    if (lCnt > 0) {BossSpawn bossspawn[lCnt]<read=ReadSetTrace,name="[Boss] Spawn",optimize=false>;}
    long  TraceBool<bgcolor=0x0000ff,name="Trace Bool">;
    if (TraceBool == 1) {TraceSet ts<read=ReadSetTrace,name="Trace">;}
    uint32  NUL4[3]<hidden=true>;
} EM;

//------------------------------------------------
// [EMDesire] Loop Structs
typedef struct {
    long    IBsignature;
    long    CoordType<bgcolor=0xff0000,name="Coord Type">;
    float   aPos_X<bgcolor=0x00ff00,name="Point A    X">;
    float   aPos_Y<bgcolor=0x00ff00,name="Point A    Y">;
    float   aPos_Z<bgcolor=0x00ff00,name="Point A    Z">;
    float   bPos_X<bgcolor=0x00ff00,name="Point B   X">;
    float   bPos_Y<bgcolor=0x00ff00,name="Point B   Y">;
    float   bPos_Z<bgcolor=0x00ff00,name="Point B   Z">;
    long    Action<bgcolor=0xff0000,name="Action">;
    uint64  unkn<bgcolor=0xff0000>;
} Route;

//------------------------------------------------
// [EMDesire] Loop Structs
typedef struct {
    long    IBsignature;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn5<bgcolor=0x00ff00>;
    float   unkn6<bgcolor=0x00ff00>;
    float   unkn7<bgcolor=0x00ff00>;
    float   unkn8<bgcolor=0x00ff00>;
    float   unkn9<bgcolor=0x00ff00>;
    float   unkn10<bgcolor=0x00ff00>;
    float   unkn11<bgcolor=0x00ff00>;
    uint32  unkn12<bgcolor=0x000000>;
    byte    NULL<bgcolor=0x000000>;
} Repop;

//------------------------------------------------
// [EMDesire]
typedef struct {
    uint32  cCnt<bgcolor=0x0000ff,name="Coordinate Count">;
    if (cType == "cEmDesireSetter"){Route r[cCnt]<read=ReadRoute,name="Route Coordinates",optimize=false>;}
    if (cType == "cEmRepopSetter"){Repop p[cCnt]<read=ReadRepop,name="Repop Coordinates",optimize=false>;}
} EMDesire;

//------------------------------------------------
// [EMGroup] Zako Data
typedef struct {
    long    unkn0;
    long    unkn1;
    long    unkn3;
} IBunkn;

//------------------------------------------------
// [EMGroup] Zako Data
typedef struct {
    long    unkn2;
    long    unkn3;
    float   unkn4;
    float   unkn5;
    float   unkn6;
    long    unkn7;
    float   unkn8;
    uint32  fCnt;
    if (fCnt > 0) {AIFSM aifsm[fCnt]<name="[AIFSM] Count",optimize=false>;}
    //uint32  six1;
    uint32  six2;
    Six six[six2]<read=ReadSix,name="Unknown SIX">; //cEmGroupSetter
    long    uCnt;
    if (uCnt > 0) {Uunkn uunkn[uCnt]<read=ReadUunkn,name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter
    long    unkn13;
    if (unkn13 > 0) {Uunkn2 uunkn2[unkn13]<name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter 
    long    FFFF1;
    long    unkn15;
    char    NUL3[5];
    //if(NUL3 == -1) {uint32 NUL5;}
    long    sCnt<bgcolor=0x0000ff,name="Zako Count">;
    if (sCnt > 0) {ZakoSpawn zakospawn[sCnt]<read=ReadZako,name="[Zako] Spawn",optimize=false>;} //cEmGroupSetter
    else{ZakoSpawn zakospawn<read=ReadZako,name="[Zako] Spawn",optimize=false>;}
    uint32  NUL4[3];
} EMGroup;

//------------------------------------------------
// SOBJ
typedef struct {
    long    IBsignature;
    string  cType<bgcolor=0xFF0000,name="Command Type">;
    long    EOT0<hidden=true>;
    Spawn   spawn<read=ReadSpawn,name="Spawn">;
    string  oName<bgcolor=0xff0000,name="[Object] Name">;
    oStruct ostruct<name="Odd Struct">;
    string  pointA<bgcolor=0x800080,name="[Object] Pointer A / [Name] Folder">;
    string  pointB<bgcolor=0x800080,name="[Object] Pointer B / [Name] Unknown">;
    string  Nihongo<bgcolor=0x800080,name="Japanese Name?">;
    string  EV<bgcolor=0x800080,name="EV ?">;
    uint32  pCount<bgcolor=0x0000ff,name="[Object] Parameter Count">;
    if (pCount != 0) {Parameters parameters[pCount]<read=ReadParam,name="Parameters",optimize=false>;}
    byte    CD[64]<name="CD NULL">;
    byte    gm<name="[Object] GM Extra">;
    if(gm != 0){GM  gm<name="GM Unknown">;}
    if (Strstr(cType, "cEmDesir") == 0){EMDesire    emd<bgcolor=0x010010,name="cEmDesireSetter Data">;}
    if (Strstr(cType, "cEmRepop") == 0){EMDesire    rep<bgcolor=0x010010,name="cEMRepopSetter">;}
    if (Strstr(cType, "cEmSette") == 0){EM          em<bgcolor=0x010010,name="cEMSetter Data">;}
    if (Strstr(cType, "cEmGroup") == 0){EMGroup     emg<bgcolor=0x010010,name="cEmGroupSetter Data ">;}
    //Mostly for printing
    local float x;
    local float y;
    local float z;
    
    x = spawn.Pos_X;
    y = spawn.Pos_Y;
    z = spawn.Pos_Z;

    local int32 ID;
    local int32 subID;
    local int32 R;
    local int32 C;
    if (Strstr(cType, "cSetAnim") == 0){ID = aa.ID; subID = aa.subID; R = aa.rBool;}
    if (Strstr(cType, "cSetFish") == 0){C = fa.vCnt; R = fa.rBool;}
} SOBJ;

//------------------------------------------------
//Read Strings
string ReadHead(Header& r) {
    string s;
    SPrintf(s, "Obj: %d", r.ObjCnt);
    return s;
}

string ReadSOBJL(rSetObject& r) {
    string s;
    if(r.cmd == 0){SPrintf(s, "Index: %d",r.ind);}
    else{SPrintf(s, "Index: %d \t " + r.pat, r.ind);}
    return s;
}

string ReadSpawn(Spawn& r) {
    string s;
    s = r.s;
    return s;
}

string ReadBool(dBool& r) {
    string s;
    SPrintf(s, "Value: %d", r.bool);
    return s;
}

string ReadInt32(dInt32& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadClass(dClass& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadFloat32(dFloat& r) {
    string s;
    SPrintf(s, "Value: %f", r.draw);
    return s;

}

string ReadVector4(dVector4& r) {
    string s;
    SPrintf(s, "X: %f \t Y: %f \t Z: %f", r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadParam(Parameters& r) {
    string s;
    s = r.PRM;
    return s;
}

string ReadSix(Six& r) {
    string s;
    SPrintf(s, "%d %d %d", r.unkn0, r.unkn1, r.unkn2);
    return s;
}

string ReadUunkn(Uunkn& r) {
    string s;
    SPrintf(s, "%d %d %d %d", r.unkn0, r.unkn1, r.unkn2, r.unkn3);
    return s;
}

string ReadZako(ZakoSpawn& r) {
    string s;
    SPrintf(s, "Unkn: %d \t [X: %f \t Y: %f \t Z: %f]", r.unkn16, r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadSetTrace(BossSpawn& r) {
    string s;
    SPrintf(s, "Spawn: %f \t [X: %f \t Y: %f \t Z: %f]", r.unkn, r.Pos_Z, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadRoute(Route& r) {
    string s;
    SPrintf(s, "Action: %d \t A[X: %f \t Y: %f \t Z: %f] \t B[X: %f \t Y: %f \t Z: %f]", 
            r.Action, r.aPos_X, r.aPos_Y, r.aPos_Z, r.bPos_X, r.bPos_Y, r.bPos_Z);
    return s;
}

string ReadRepop(Repop& r) {
    string s;
    SPrintf(s, "[X: %f \t Y: %f \t Z: %f]", r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}

//------------------------------------------------
//Display Info
Header header<bgcolor=0x00ffff,read=ReadHead,name="Header">;

local int i;
local int p;
local string cType;
local int m;

//Changes the if or case
m = 0;

for (i = 0; i < header.ObjCnt; i++) {
    if (header.fType == 10) {
        rSetObject  sobjl<name="rSetObject",read=ReadSOBJL>;
    }
    if (m == 0) {
        if (header.fType == 6451059) {
            FSkip(4);
            cType = ReadString(FTell());
            switch (cType) {
                case "cSetAnimalArea"           : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cSetAnimalArea">;            break;
                case "cSetFishArea"             : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cSetFishArea">;              break;
                case "cAssetBasicSetObject"     : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cAssetBasicObject">;         break;
                case "cEmDesireSetter"          : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cEmDesireSetter">;           break;
                case "cEmGroupSetter"           : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cEmGroupSetter">;            break;
                case "cEmRepopSetter"           : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cEmRepopSetter">;            break;
                case "cEmSetter"                : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cEmSetter">;                 break;
                case "cFishingFloatSetter"      : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cFishingFloatSetter">;       break;
                case "cPlJumpPos"               : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cPlJumpPos">;                break;
                case "cTerrainPoint"            : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cTerrainPoint">;             break;
                case "cTraceLogSetter"          : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cTraceLogSetter">;           break;
                case "cKimenTraceLogSetter"     : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cKimenTraceLogSetter">;      break;
                case "cNpcTraceLogSetter"       : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cNpcTraceLogSetter">;        break;
                case "cWildCatTraceLogSetter"   : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cWildCatTraceLogSetter">;    break;
                case "cVillageNpcSetter"        : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cVillageNpcSetter">;         break;
                case "cQuestNpcSetter"          : FSkip(-4); SOBJ sobj<read=ReadSOBJ,name="cQuestNpcSetter">;           break;
            }
        }
    }
}